import addressPickerPage from '../../support/page-object/address_picker.page.js'
/// <reference types="Cypress" />
describe("C3. Conformation Address Picker (#confirmationAddressPicker0) block testing", () => {
    beforeEach(() => {
      cy.visit('/');
    });
    it('1. Check block title to be visible and have valid text', () => {
        addressPickerPage.headerTitleVerifyConformationAddressPickerZero('Confirmation Address Picker')
    })
    xit('2. Check "View code" button to be visible, not disabled. Check that clicking on button shows code in tabs and hide code after one more click on it', () => {
        addressPickerPage.headerButtonVerifyConformationAddressPickerZero(0, 'mat-focus-indicator mat-tooltip-trigger mat-icon-button mat-button-base')
    })
    xit('3. Check "Configure example" button to be visible, not disabled. Clicking on it do ????', () => {
        addressPickerPage.headerButtonVerifyConformationAddressPickerZero(1, 'mat-focus-indicator mat-tooltip-trigger mat-icon-button mat-button-base ng-star-inserted')
    })
    it('4. Check "Save" button to be visibe and react properly when input field is clear. Check hint class and text before and after clicking "Save". Check text of informating pop-up', () => {
        addressPickerPage.hintTitleVerifyConformationAddressPickerZero(0, 'mat-hint ng-tns-c145-1 ng-star-inserted', 'Hint Hint Hint Hint Hint...')
        addressPickerPage.saveButtonVerifyConformationAddressPickerZero('mat-focus-indicator mat-raised-button mat-button-base mat-primary', 'Save')
        addressPickerPage.informationPopupVerifyAddressPickerPage('Changes not saved. Please review errors highlighted in red.')
        addressPickerPage.hintTitleVerifyConformationAddressPickerZero(1, 'fs-form-error-target fs-form-error fs-form-error-required', 'This field is required')
    })
    it('5. Check clue elements to be visible, have valid class and text', () => {
        addressPickerPage.hintTitleVerifyConformationAddressPickerZero(0, 'mat-hint ng-tns-c145-1 ng-star-inserted', 'Hint Hint Hint Hint Hint...')
    })
    it('6. Testing of autocomplete function. Check that panel with choosed address not existing before choosing. Input and select adress from autocomplete. Click "Apply" and check if selected adderss panel contain valid text. Check class and text of "Save" button, click on it. Check text of informating popup. Check clear address button to be visible, not disabled and click on it. Check that panel with choosed address not existing', () => {
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(0)
        addressPickerPage.inputTitleVerifyConformationAddressPickerZero('mat-form-field-label ng-tns-c145-1 mat-empty mat-form-field-empty ng-star-inserted fs-form-label-required fs-form-label', 'Location *')
        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.footerButtonsAddressPickerPage.contains('Apply').click()
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(1, 'Selected Address', 'Ottawa', 'ON', 'CA')
        addressPickerPage.saveButtonVerifyConformationAddressPickerZero('mat-focus-indicator mat-raised-button mat-button-base mat-primary', 'Save')
        addressPickerPage.informationPopupVerifyAddressPickerPage('Saved')
        addressPickerPage.clearAddrAdressVerifyConformationAddressPickerZero()
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(0)
    })
    it('7. Testing of manual address input window with autocomplite and without. Part 1. Choose option from autocomplete dropdown to enter address manually. Check titles and input text in fields. Check map panel to be blocked with correct text. Check buttons to be visible, have valid class and work correct', () => {
        addressPickerPage.manualInputAddrConformationAddressPickerZero(' Enter address manually ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(0, 'Street', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(1, 'Address 2', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(2, 'Address 3', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(3, 'City', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(4, 'Province/State', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(6, 'ZIP/Postal Code', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(5, 'Country', 0, 'Canada')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(4, 'Province', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(6, 'Postal Code', 0, 'This is test')
        addressPickerPage.mapBlockVerifyAddrAddressPickerPage(0, 'Could not find address "CA, This is test, This is test, This is test, This is test"')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(0, 1, 'mat-focus-indicator mat-button mat-button-base mat-primary', 'Apply')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(1, 1, 'mat-focus-indicator mat-button mat-button-base', 'Cancel')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(2, 0, '', '')
        addressPickerPage.footerButtonsAddressPickerPage.contains('Apply').click()
        cy.wait(500)
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(2, 'Selected Address', 'This is test', 'This is test', 'This is test', 'This is test', 'This is test', 'This is test', 'CA')
        cy.reload()

        addressPickerPage.inputFieldConformationAddressPickerZero.click()
        addressPickerPage.manualInputAddrConformationAddressPickerZero(' Enter address manually ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(3, 'City', 0, 'Toronto')
        addressPickerPage.footerButtonsAddressPickerPage.contains('Cancel').click()
        addressPickerPage.manualInputAddrConformationAddressPickerZero(' Enter address manually ')
        cy.reload()
    })
    it('8. Testing of manual address input window with autocomplite and without. Part 2. Input search text in field and choose correct option. Check map panel to be visible and not blocked.  Check buttons to be visible, have valid class and work correct', () => {
        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.mapBlockVerifyAddrAddressPickerPage(1)
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(0, 'Street', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(1, 'Address 2', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(2, 'Address 3', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(3, 'City', 'Ottawa', 'Ottawa')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(5, 'Country', 0, 'Canada')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(4, 'Province', 0, 'Ontario')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(6, 'Postal Code', 0, 'This is test')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(0, 1, 'mat-focus-indicator mat-button mat-button-base mat-primary', 'Apply')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(1, 1, 'mat-focus-indicator mat-button mat-button-base ng-star-inserted', ' Center Address ')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(2, 1, 'mat-focus-indicator mat-button mat-button-base', 'Cancel')
        addressPickerPage.footerButtonVerifyAddrAddressPickerPage(3, 0, '', '')
        addressPickerPage.footerButtonsAddressPickerPage.contains('Cancel').click()
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(1, 'Selected Address', 'Ottawa', 'ON', 'CA')
        cy.reload()

        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(0, 'Street', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(1, 'Address 2', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(2, 'Address 3', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(3, 'City', 'Ottawa', 'Ottawa')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(5, 'Country', 0, 'Canada')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(4, 'Province', 0, 'Ontario')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(6, 'Postal Code', 0, 'This is test')
        addressPickerPage.footerButtonsAddressPickerPage.contains('Apply').click()
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(2, 'Selected Address', 'This is test', 'This is test', 'This is test', 'Ottawa', 'ON', 'This is test', 'CA')
        cy.reload()
    })
    it('9. Testing of manual address input window with autocomplite and without. Part 3. Check closing manual address input window without inner buttons runs notification window. Check title and content of it. Check buttons to be visible, not disabled and works properly', () => {
        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(0, 'Street', 0, 'This is test')
        addressPickerPage.escapeButtonClickModalWindowAddressPickerPage()
        addressPickerPage.leavingNotificationWindowVerifyAddressPickerPage('You Have Unsaved Changes', 'What would you like to do with your changes?')
        addressPickerPage.leavingNotificationWindowButtonVerifyAddressPickerPage(0, 'mat-focus-indicator mat-button mat-button-base mat-primary ng-star-inserted', 'Save & Continue')
        addressPickerPage.leavingNotificationWindowButtonVerifyAddressPickerPage(1, 'mat-focus-indicator mat-button mat-button-base ng-star-inserted', 'Discard Changes & Continue')
        addressPickerPage.leavingNotificationWindowButtonVerifyAddressPickerPage(2, 'mat-focus-indicator mat-button mat-button-base ng-star-inserted', 'Review Changes')

        addressPickerPage.leavingNotificationWindowButtonClickVerifyAddressPickerPage(0, 'Review Changes')
        addressPickerPage.leavingChangesNotificationWindowAddressPickerPage.should('not.exist')
        addressPickerPage.manualAddrInputWindowAddressPickerPage.should('be.visible')
        cy.reload()

        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(3, 'City', 'Ottawa', 'Ottawa')
        addressPickerPage.escapeButtonClickModalWindowAddressPickerPage()
        addressPickerPage.leavingNotificationWindowButtonClickVerifyAddressPickerPage(0, 'Discard Changes & Continue')
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(1, 'Selected Address', 'Ottawa', 'ON', 'CA')
        cy.reload()

        addressPickerPage.autocompliteAdressVerifyConformationAddressPickerZero('Ottawa', ' Ottawa, ON, Canada ')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(0, 'Street', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(1, 'Address 2', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(2, 'Address 3', 0, 'This is test')
        addressPickerPage.manualAddrWindowInputAndTitleAddressPickerPage(6, 'Postal Code', 0, 'This is test')
        addressPickerPage.escapeButtonClickModalWindowAddressPickerPage()
        addressPickerPage.leavingNotificationWindowButtonClickVerifyAddressPickerPage(0, 'Save & Continue')
        addressPickerPage.selectedAddrVerifyConformationAddressPickerZero(2, 'Selected Address', 'This is test', 'This is test', 'This is test', 'Ottawa', 'ON', 'This is test', 'CA')
    })
})